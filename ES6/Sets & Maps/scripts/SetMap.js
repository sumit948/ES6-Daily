"use strict";
//-----------------------Problem with set and map in javascript------------------------------------
let mySet = Object.create(null);
mySet.id = true;
if (mySet.id) {
    console.log("id exsit!!");
}
//---------------------------------------------------------------------------------
let myMap = Object.create(null);
myMap.name = "Jhon";
let val = myMap.name;
console.log(val);
//or
myMap[1000] = "Weak";
console.log(myMap["1000"]);
//-------------------------------
// let obj1 = {};
// let obj2 = {};
// myMap[obj1] = "Babayaga"
// console.log(myMap[obj1]); //or obj2 it will return Babayaga, it is considering two diff obj as a one
//___________________________________________________________________________________________________________________
//------------------Using TypeScript----------------
let mySet1 = new Set();
let ob1 = {};
let ob2 = {};
mySet1.add("Jhon Weak");
mySet1.add("Jhon weak The Babayaga");
mySet1.add(7);
mySet1.add(7); //duplicates values ignored
console.log(mySet1);
let chainSet = new Set().add("The").add("Rock").add("is").add("cooking");
console.log(chainSet);
let arrSet = new Set([1, 2, 3, 4, 4, 5]);
console.log("size of array" + arrSet.size);
console.log(arrSet.has(4)); //to check array size is true / false
//console.log(arrSet.delete(2)); //to delete
//___________________________________________________________________
//--------------------Weak Set---------------------------------------
let oneSet = new WeakSet();
let key = {};
oneSet.add(key);
alert(oneSet.has(key)); //true
//_____________________________________________________________________________________________________________________________________
//Map
//key and value
let oneMap = new Map(); // to create map
oneMap.set("Jhon", "weak"); //to set
oneMap.set(1, 2);
//console.log(oneMap.get("Jhon")); //to get
let one = {};
let two = {};
let three = {};
oneMap.set(one, 10);
oneMap.set(two, 20);
oneMap.set(three, 30);
console.log(oneMap.get(one));
console.log(oneMap.get(two));
console.log(oneMap.size);
console.log(oneMap.has("Jhon")); //true
console.log(oneMap.delete(three)); //delete three
//--------------------------Iterating over map--------------------------------------------------------
let arrMap = new Map([
    ["fname", "jhon"],
    ["lname", "weak"]
]);
//geting values
for (let value of arrMap.values()) {
    console.log(value);
}
//getting keys
for (let key of arrMap.keys()) {
    console.log(key);
}
//if you want both
for (let ent of arrMap.entries()) {
    console.log(`${ent[0]} - > ${ent[1]}`);
}
//or also like this
for (let [key, value] of arrMap.entries()) {
    console.log(`${key} : ${value}`);
}
//---------------------for each with map------------------------------
let forMap = new Map([["f1", "Cristano"], ['f2', 'Ronaldo']]);
forMap.forEach(function1);
function function1(value, key, callingMap) {
    console.log(key + " " + value);
    console.log(forMap === callingMap);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0TWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vU2V0TWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxtR0FBbUc7QUFDbkcsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQyxLQUFLLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztBQUNoQixJQUFHLEtBQUssQ0FBQyxFQUFFLEVBQUM7SUFDUixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQzdCO0FBQ0QsbUZBQW1GO0FBQ25GLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEMsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7QUFDcEIsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztBQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLElBQUk7QUFDSixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFBO0FBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDM0IsaUNBQWlDO0FBQ2pDLGlCQUFpQjtBQUNqQixpQkFBaUI7QUFFakIsMkJBQTJCO0FBQzNCLHVHQUF1RztBQUN2RyxxSEFBcUg7QUFDckgsb0RBQW9EO0FBRXBELElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDdkIsSUFBSSxHQUFHLEdBQUUsRUFBRSxDQUFDO0FBQ1osSUFBSSxHQUFHLEdBQUUsRUFBRSxDQUFDO0FBRVosTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN4QixNQUFNLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDckMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLE1BQU0s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