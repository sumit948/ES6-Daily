"use strict";
//symbols is always creates unique id
let s = Symbol("first Symbol");
console.log(typeof (s));
console.log(s.toString());
let s2 = Symbol('Test');
let s3 = Symbol('Test');
console.log(s2 === s3); //false bcoz unique ids
let s4 = Symbol.for('Test');
let s5 = Symbol.for('Test');
console.log(s4 === s5); //true
console.log(Symbol.keyFor(s4)); //give present value
let fname = Symbol("First Name");
let person = {
    [fname]: "Jhon"
};
console.log(Object.getOwnPropertyNames(person));
console.log(Object.getOwnPropertySymbols(person));
//_______________________________________________________________________________________________________
//for ..of --> iterator method
let str = "sumit";
let arr = [1, 2];
let obj = { name: "Sumit" };
let num = 10;
console.log("For String : " + typeof str[Symbol.iterator]);
console.log("For Array : " + typeof arr[Symbol.iterator]);
//console.log("For object : "+ typeof obj[Symbol.iterator]); //undefined
//console.log("For number : "+ typeof num[Symbol.iterator]); //undefined
//------------------------Iterable and Iterators---------------------------------------------------------
let Iterable = [1, 2, 3, 4];
function createIterator(array1) {
    let count = 0;
    return {
        next: function () {
            return count < array1.length ?
                { value: array1[count++], done: false } :
                { value: undefined, done: true };
        }
    };
}
let myIterator = createIterator(Iterable);
console.log(myIterator.next());
console.log(myIterator.next());
console.log(myIterator.next());
console.log(myIterator.next());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3N5bWJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFDQUFxQztBQUNyQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBRTFCLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUN2QixJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUcsRUFBRSxDQUFDLENBQUEsQ0FBQSx1QkFBdUI7QUFFM0MsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUMzQixJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRTNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTTtBQUU1QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQjtBQUVwRCxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFakMsSUFBSSxNQUFNLEdBQUc7SUFDVCxDQUFDLEtBQUssQ0FBQyxFQUFHLE1BQU07Q0FDbkIsQ0FBQTtBQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUVsRCx5R0FBeUc7QUFDekcsOEJBQThCO0FBRTlCLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQTtBQUNqQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtBQUNmLElBQUksR0FBRyxHQUFHLEVBQUMsSUFBSSxFQUFDLE9BQU8sRUFBQyxDQUFBO0FBQ3hCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUViLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxHQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ3pELHdFQUF3RTtBQUN4RSx3RUFBd0U7QUFFeEUseUdBQXlHO0FBQ3pHLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7QUFFekIsU0FBUyxjQUFjLENBQUMsTUFBc0I7SUFDMUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsT0FBTTtRQUNGLElBQUksRUFBRTtZQUNGLE9BQU8sS0FBSyxHQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUEsQ0FBQztnQkFDM0IsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBQyxDQUFBLENBQUM7Z0JBQ3RDLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUM7UUFDbkMsQ0FBQztLQUNKLENBQUE7QUFDTCxDQUFDO0FBRUQsSUFBSSxVQUFVLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMifQ==